"""
Django settings for taskmanager project.
Generated by 'django-admin startproject' using Django 5.2.5.
"""

import os
from pathlib import Path
import dj_database_url
from decouple import config

# -----------------------------
# BASE DIRECTORY
# -----------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# -----------------------------
# SECURITY
# -----------------------------
SECRET_KEY = os.environ.get('SECRET_KEY', 'unsafe-local-secret')
DEBUG = os.environ.get('DEBUG', 'True') == 'True'  # ✅ keep False in production

# -----------------------------
# ALLOWED HOSTS & CSRF
# -----------------------------
# Detect Railway host dynamically
railway_host = os.environ.get('RAILWAY_STATIC_URL')  # Railway may provide this

if railway_host:
    ALLOWED_HOSTS = [railway_host]  # ✅ Use Railway-provided host in production
else:
    # ✅ Include your deployed URL explicitly + local for dev
    ALLOWED_HOSTS = ['web-production-bb4c.up.railway.app', 'localhost', '127.0.0.1']

# ✅ CSRF trusted origins must include https:// for deployed site
CSRF_TRUSTED_ORIGINS = [
    'https://web-production-bb4c.up.railway.app',
]

# -----------------------------
# APPLICATIONS
# -----------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'task',  # ✅ your app
]

# -----------------------------
# MIDDLEWARE
# -----------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # ✅ Handles static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# -----------------------------
# TEMPLATES
# -----------------------------
ROOT_URLCONF = 'taskmanager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],  # ✅ Keep templates organized
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',  # ✅ required for auth, messages
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# -----------------------------
# WSGI
# -----------------------------
WSGI_APPLICATION = 'taskmanager.wsgi.application'

# -----------------------------
# DATABASE
# -----------------------------
DATABASES = {
    'default': dj_database_url.parse(
        config(
            "DATABASE_URL",
            default="postgresql://postgres:ihsan@250@localhost:5432/taskmanager"
        ),
        conn_max_age=600
    )
}
# ✅ dj_database_url allows Railway Postgres URL or local fallback

# -----------------------------
# PASSWORD VALIDATORS
# -----------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# -----------------------------
# INTERNATIONALIZATION
# -----------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# -----------------------------
# STATIC FILES
# -----------------------------
STATIC_URL = '/static/'  # ✅ Always start with /

# ✅ Deployment location for collectstatic
STATIC_ROOT = BASE_DIR / "staticfiles"

# ✅ Local dev static folder
STATICFILES_DIRS = [BASE_DIR / "static"]  # ✅ optional if you have custom static files

# ✅ Whitenoise: compress + cache busting
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# -----------------------------
# MEDIA FILES
# -----------------------------
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"  # ✅ user-uploaded files

# -----------------------------
# AUTHENTICATION REDIRECTS
# -----------------------------
LOGIN_REDIRECT_URL = "task_list"  # ✅ where users go after login
LOGOUT_REDIRECT_URL = "login"     # ✅ where users go after logout

# -----------------------------
# EMAIL CONFIGURATION
# -----------------------------
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ihsankhan101112@gmail.com'
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')  # ✅ Never hardcode passwords

# -----------------------------
# CUSTOM USER MODEL
# -----------------------------
# AUTH_USER_MODEL = 'task.CustomUser'  # ✅ If you use a custom user model

# -----------------------------
# DEFAULT PRIMARY KEY
# -----------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -----------------------------
# NOTES & CHANGES
# -----------------------------
# 1. CSRF_TRUSTED_ORIGINS added to avoid 403 errors on Railway.
# 2. STATICFILES_STORAGE and Whitenoise added to serve static files in production.
# 3. DATABASE_URL uses dj_database_url to support Railway Postgres or local dev.
# 4. ALLOWED_HOSTS correctly includes deployed URL and localhost.
# 5. AUTH_USER_MODEL ensures custom user works in register/login forms.
# 6. DEBUG = False in production recommended.
